# hr/signals.py
from __future__ import annotations

from django.db import transaction
from django.db.models.signals import post_save, pre_save, post_delete
from django.dispatch import receiver

from .models import Employee, LeaveBalance, LeaveRequest

# üîî ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
from .emails import (
    send_leave_request_to_approvers,
    send_leave_status_to_requester,
)

# ========= Helper =========
def _calc_days(start, end) -> int:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö inclusive (‡∏£‡∏ß‡∏°‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á)"""
    return (end - start).days + 1


# ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤ -> ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô LeaveBalance ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏±‡∏Å‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤
BALANCE_FIELD_MAP = {
    "annual": "annual_leave",
    "sick": "sick_leave",
    "personal": "personal_leave",
    "relax": "relax_leave",
    "maternity": "maternity_leave",
    "other": "other_leave",
    # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: "unpaid" ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÉ‡∏ô‡πÅ‡∏°‡∏õ
}


def _get_or_create_balance_locked(employee: Employee) -> LeaveBalance:
    """
    ‡∏î‡∏∂‡∏á/‡∏™‡∏£‡πâ‡∏≤‡∏á LeaveBalance ‡πÇ‡∏î‡∏¢‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition
    ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô transaction.atomic() ‡πÄ‡∏™‡∏°‡∏≠
    """
    bal, _ = LeaveBalance.objects.select_for_update().get_or_create(employee=employee)
    return bal


def _apply_refund(bal: LeaveBalance, days: int, field_name: str | None):
    if not field_name or days <= 0:
        return
    cur = getattr(bal, field_name, 0) or 0
    setattr(bal, field_name, cur + days)


def _apply_deduct(bal: LeaveBalance, days: int, field_name: str | None):
    if not field_name or days <= 0:
        return
    cur = getattr(bal, field_name, 0) or 0
    new_val = cur - days
    if new_val < 0:
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢: ‡∏à‡∏∞ raise ValidationError ‡∏Å‡πá‡πÑ‡∏î‡πâ)
        new_val = 0
    setattr(bal, field_name, new_val)


# ========= Employee: ‡∏™‡∏£‡πâ‡∏≤‡∏á Balance ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ =========
@receiver(post_save, sender=Employee)
def create_balance_for_employee(sender, instance: Employee, created, **kwargs):
    if created:
        LeaveBalance.objects.get_or_create(employee=instance)


# ========= LeaveRequest: ‡∏ï‡∏±‡∏î/‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç =========
@receiver(pre_save, sender=LeaveRequest)
def handle_leave_deduction_on_update(sender, instance: LeaveRequest, **kwargs):
    """
    ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å LeaveRequest:
    - ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å (approved + deducted=True) -> ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
    - ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏∑‡∏≠ approved ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà deducted -> ‡∏´‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏Å‡πâ '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô', ‡∏´‡∏£‡∏∑‡∏≠ '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤'
    - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ _old_status ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (post_save)
    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ pre_save ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° (old) ‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å
    """
    # ‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ pk) ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ô post_save ‡πÅ‡∏ó‡∏ô
    if not instance.pk:
        return

    old = LeaveRequest.objects.get(pk=instance.pk)
    # ‚≠ê ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô post_save ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    instance._old_status = old.status

    with transaction.atomic():
        bal = _get_or_create_balance_locked(instance.employee)

        old_days = _calc_days(old.start_date, old.end_date)
        new_days = _calc_days(instance.start_date, instance.end_date)

        old_field = BALANCE_FIELD_MAP.get(old.leave_type)
        new_field = BALANCE_FIELD_MAP.get(instance.leave_type)

        # 1) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÑ‡∏ß‡πâ (approved + deducted=True) -> ‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡πà‡∏≠‡∏ô
        if old.deducted and old.status == "approved":
            _apply_refund(bal, old_days, old_field)
            instance.deducted = False  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ deducted ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏´‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà

        # 2) ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏∑‡∏≠ approved ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà deducted -> ‡∏´‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
        if instance.status == "approved" and not instance.deducted:
            if new_field is not None:  # unpaid ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÅ‡∏°‡∏õ -> ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å
                _apply_deduct(bal, new_days, new_field)
            instance.deducted = True

        bal.save()


# ========= LeaveRequest: ‡πÄ‡∏Ñ‡∏™‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (created=True) =========
@receiver(post_save, sender=LeaveRequest)
def handle_leave_deduction_on_create(sender, instance: LeaveRequest, created, **kwargs):
    """
    ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà' ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ approved ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
    (‡∏õ‡∏Å‡∏ï‡∏¥ flow ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô pending ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡∏ö‡πà‡∏≠‡∏¢)
    ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á Approver ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠
    """
    if created:
        # ‡∏´‡∏±‡∏Å‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô approved
        if instance.status == "approved" and not instance.deducted:
            field = BALANCE_FIELD_MAP.get(instance.leave_type)
            if field is not None:  # unpaid ‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å
                with transaction.atomic():
                    bal = _get_or_create_balance_locked(instance.employee)
                    days = _calc_days(instance.start_date, instance.end_date)
                    _apply_deduct(bal, days, field)
                    bal.save()
                    instance.deducted = True
                    instance.save(update_fields=["deducted"])

        # üîî ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á Approver ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà
        try:
            send_leave_request_to_approvers(instance)
        except Exception:
            # ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‚Äî‡∏à‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏¢‡πÜ
            pass


# ========= LeaveRequest: ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô" =========
@receiver(post_save, sender=LeaveRequest)
def notify_requester_on_status_change(sender, instance: LeaveRequest, created, **kwargs):
    """
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏° -> ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô
    ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ _old_status ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏ß‡πâ‡πÉ‡∏ô pre_save
    """
    if created:
        return
    old_status = getattr(instance, "_old_status", None)
    if old_status is not None and old_status != instance.status:
        try:
            send_leave_status_to_requester(instance)
        except Exception:
            pass


# ========= LeaveRequest: ‡∏•‡∏ö‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ (‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏´‡∏±‡∏Å) =========
@receiver(post_delete, sender=LeaveRequest)
def handle_leave_refund_on_delete(sender, instance: LeaveRequest, **kwargs):
    """
    ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ approved ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏¢‡∏´‡∏±‡∏Å‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡πÑ‡∏ß‡πâ (deducted=True)
    ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏Å‡∏•‡∏±‡∏ö
    """
    if instance.status != "approved" or not instance.deducted:
        return

    field = BALANCE_FIELD_MAP.get(instance.leave_type)
    if field is None:
        # unpaid ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å
        return

    with transaction.atomic():
        # ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ balance (‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏§‡∏©‡∏é‡∏µ) ‡∏à‡∏∂‡∏á get_or_create
        bal, _ = LeaveBalance.objects.get_or_create(employee=instance.employee)
        bal = LeaveBalance.objects.select_for_update().get(pk=bal.pk)
        days = _calc_days(instance.start_date, instance.end_date)
        _apply_refund(bal, days, field)
        bal.save()
